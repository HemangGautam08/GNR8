# -*- coding: utf-8 -*-
"""agent_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SEwXRwj7oi0ChZ_uHBuMxqqRXBf1O21K
"""

# Commented out IPython magic to ensure Python compatibility.

# !pip install crewai
# !pip install crewai_tools
# !pip install 'crewai[tools]'

# Commented out IPython magic to ensure Python compatibility.

from crewai import Agent, Task, Crew
# !pip install crewai langchain_groq
import uuid

import os
from langchain_groq import ChatGroq

# Setting an environment variable
os.environ['GROQ_API_KEY'] = "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"

groq_api_key = os.environ['GROQ_API_KEY']

class WebsiteCreaterAgents:
    def __init__(self):
        self.llm = ChatGroq(
            #provider="groq",  # Explicitly specify the Groq provider
            model="groq/llama-3.3-70b-versatile",  # Replace with your specific model
            api_key=os.getenv("GROQ_API_KEY")  # Ensure the API key is loaded from the environment
        )

    def prompt_enhancer_agent(self):
        return Agent(
            role="Website Prompt Enhancer",
            goal=f"""
                Refine user-provided prompts about website design and functionality into clear, detailed, and actionable instructions.

                Analyze the user's input for ambiguities, identify essential details (e.g., purpose, target audience, core features, design preferences),
                and structure the prompt into an optimized format suitable for implementation by developers and designers.
                Ensure the refined prompt is comprehensive and tailored to the user's vision for their website.
                The refined prompt should be well structured to ensure uniformity in the responses from the code generation model.
                """,
            backstory="""
                As a Website Prompt Enhancer, your role is to transform vague or incomplete descriptions of a website into precise, actionable, and structured instructions
                that guide effective website development and design. You consider user goals, target audience, key features, and aesthetic preferences.
                """,
            verbose=True,
            llm=self.llm,
            max_iter=2,
        )

    def html_css_js_writer_agent(self):
        return Agent(
            role="HTML, CSS, and JS Code Writer",
            goal=f"""
                You are an expert web engineer hired by top companies to design, develop, and deliver a production-level website in one go.
                Your task is to generate a comprehensive, modular, and visually stunning HTML, CSS, and JavaScript code package that exemplifies state-of-the-art web design and functionality.

                Requirements:
                1. **HTML:**
                  - Construct a robust, semantically correct, and detailed structure including a hero section, advanced navigation with intuitive dropdowns and hamburger menus (optimally designed for both desktop and mobile), multiple content sections (such as features, testimonials, horizontal scrolling slideshows, and a footer) with pixel-perfect alignment.
                2. **CSS:**
                  - Apply industry-leading styling with eye-catching, adaptive backgrounds (using gradients, images, or patterns) and modern typography with animated text effects.
                  - Develop a sophisticated design that features hover effects & smooth transitions.
                  - Ensure that layouts are fully responsive, achieving flawless alignment and visual balance on all screen sizes.
                3. **JavaScript:**
                  - Deliver fully functional, clean, and production-level interactivity. This includes dynamic buttons with smooth animations, functional dropdown menus, modal dialogs, horizontal scrolling slideshows, a robust dark mode toggle, and any other interactive element expected in a high-caliber web application.
                  - Implement code that is not only elegant and efficient but also perfectly working in real scenarios.

                Your deliverable must showcase the aesthetics and functionality of websites developed by leading companies like bolt.new and rollout.ai. Ensure perfect alignment of elements & generate the best possible expert-level website code in one go.
                """,
            backstory="""
                As an expert HTML, CSS, and JS Code Writer, you have a flair for building sophisticated, interactive websites that rival those crafted by top web building platforms.
                Your work ensures pixel-perfect alignment across all devices, seamless interactivity, and a modern, vibrant aesthetic.
                """,
            verbose=True,
            llm=self.llm,
            max_iter=2,
        )

    # def code_checker_agent(self):
    #         return Agent(
    #             role="Code Checker",
    #             goal=f"""
    #                 Review the generated HTML, CSS, and JavaScript code for potential logical errors, syntactical issues,
    #                 or deviations from best practices. Provide a clear summary of any detected issues along with suggestions for improvement.
    #             """,
    #             backstory="""
    #                 As a Code Checker, your role is to analyze code for hidden issues, ensure logical correctness, and to offer recommendations for improvements.
    #             """,
    #             verbose=True,
    #             llm=self.llm,
    #             max_iter=1,
    #         )

class PromptEnhancingAndWebpageTask:
    def enhance_prompt(self, agent, input_data):
        description = input_data.get("description", "")
        target_audience = input_data.get("target_audience", "")

        task_obj = Task(
            description=f"""
                Refine the user-provided prompt about website design and functionality.

                Input description:
                ```
                {description}
                ```

                Target audience: {target_audience}

                Task Details:
                - Analyze and refine the input for clarity.
                - Highlight essential details such as purpose, features, and design preferences.
                - Structure the output into a detailed and actionable prompt.

                Deliverable:
                - A refined prompt ready for use by developers or designers.
            """,
            agent=agent,
            expected_output="Refined website design prompt.",
            async_execution=False,
        )
        if not hasattr(task_obj, 'id') or not task_obj.id:
            task_obj.id = str(uuid.uuid4())
        return task_obj

    def generate_code(self, agent, refined_prompt):
        task_obj = Task(
            description=f"""
                Generate a complete and visually impressive HTML, CSS, and JavaScript code package based on the refined website prompt provided below.

              Refined Prompt:
              ```
              {refined_prompt}
              ```

              Task Details:
              - **HTML:**
                  - Build an intricate webpage structure that includes a hero section, advanced navigation with fully functional dropdown menus and a hamburger menu for smaller screens, multiple content sections (such as features, testimonials, horizontal scrolling slideshows), and a footer.
                  - Ensure perfect alignment and a balanced layout for both desktop and mobile views.
              - **CSS:**
                  - Design a vibrant and modern look using attractive backgrounds (gradients, images, or patterns) and modern typography with animated text effects.
                  - Include creative hover effects, smooth transitions on buttons and links.
                  - Create an adaptive layout that reflows content gracefully for different screen sizes without compromising desktop or mobile alignment.
              - **JavaScript:**
                  - Enhance interactivity with fully operational buttons, smooth scrolling, interactive dropdown menus, modal dialogs, horizontal scrolling slideshows, and a robust dark mode toggle.
                  - Ensure animations and dynamic interactions (e.g., for text effects) are functional and engaging rather than basic or placeholder code.
                  - The JS must be well-structured and documented to showcase its practical interactivity.
              - Aim to emulate the modern, high-quality aesthetic of sites like bolt.new and rollout.ai, where both design and functionality are at the forefront.

              Deliverable:
              - A complete, polished code snippet (HTML, CSS, and JS) that demonstrates the capability to create complex, dynamic, and visually appealing websites ready for a competitive presentation.
            """,
            agent=agent,
            expected_output="Generated HTML, CSS, and JS code.",
            async_execution=False,
        )
        if not hasattr(task_obj, 'id') or not task_obj.id:
            task_obj.id = str(uuid.uuid4())  # <-- New assignment for code generation task
        return task_obj


    # def check_generated_code(self, agent, generated_code):
    #     return Task(
    #         description=f"""
    #             Please review the following generated HTML, CSS, and JavaScript code for any logical errors or issues
    #             in syntax, best practices, or potential runtime problems. Provide clear feedback with suggestions for corrections.

    #             Generated Code:
    #             ```
    #             {generated_code}
    #             ```
    #         """,
    #         agent=agent,
    #         expected_output="Reviewed code with potential issues and recommendations.",
    #         async_execution=False,
    #     )

import os
import time
from dotenv import load_dotenv

load_dotenv()

import pickle

class WebsiteCreaterPipeline:
    def __init__(self):
        self.agents = None  # Will be initialized later
        self.prompt_enhancer = None
        self.code_generator = None
        self.tasks_obj = None
        self._initialize_agents()

    def _initialize_agents(self):
        """Initialize agents and tasks."""
        self.agents = WebsiteCreaterAgents()
        self.prompt_enhancer = self.agents.prompt_enhancer_agent()
        self.code_generator = self.agents.html_css_js_writer_agent()
        self.tasks_obj = PromptEnhancingAndWebpageTask()

    def __getstate__(self):
        """Exclude non-serializable components for pickling."""
        state = self.__dict__.copy()
        state['agents'] = None  # Exclude agents
        state['prompt_enhancer'] = None
        state['code_generator'] = None
        state['tasks_obj'] = None
        return state

    def __setstate__(self, state):
        """Reinitialize excluded components after unpickling."""
        self.__dict__.update(state)
        self._initialize_agents()

    def predict(self, user_input):
        # Prepare input data
        input_data = {
            "description": user_input,
            "target_audience": "Users seeking a high-quality, production-ready website"
        }

        # Create tasks
        prompt_task = self.tasks_obj.enhance_prompt(agent=self.prompt_enhancer, input_data=input_data)
        code_task = self.tasks_obj.generate_code(agent=self.code_generator, refined_prompt=prompt_task)

        # Setup Crew with our tasks
        crew = Crew(
            agents=[self.prompt_enhancer, self.code_generator],
            tasks=[prompt_task, code_task],
            max_rpm=29
        )

        # Execute the pipeline
        results = crew.kickoff()

        # Extract output
        results_dict = results.dict()
        generated_code = ""
        for key, value in results_dict.items():
            if isinstance(value, str) and ("<!DOCTYPE html>" in value or "<html" in value):
                generated_code = value
                break

        if not generated_code:
            generated_code = "Error: No code generated."
        return generated_code


# print(WebsiteCreaterPipeline.predict(WebsiteCreaterPipeline(), "to do website"))


import pickle

# Create an instance of the pipeline
pipeline = WebsiteCreaterPipeline()

# Save the instance to a .pkl file
with open('website_creator_pipeline.pkl', 'wb') as file:
    pickle.dump(pipeline, file)